name: üöÄ Publish

on:
    workflow_call:
        inputs:
            repository_name:
                description: The name of the repository. It must previously exist on the server running the workflow and can be found with the command "Get-PSRepository".
                required: false
                default: 'CmnhMyGet'
                type: string
                
defaults:
    run:
        shell: pwsh

env:
    MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}

jobs:
    Publish:
        name: üöÄ Publish PS Module to MyGet
        runs-on: self-hosted
        steps:
            - name: "üöö Get Latest Code"
              uses: actions/checkout@v3
              with:
                fetch-depth: "0"
            - name: üöÄ Publish PS Module to MyGet
              run: |
                try {
                    Publish-Module -Path (Get-Location) -NuGetApiKey $ENV:MYGET_API_KEY -Repository ${{ inputs.repository_name }} -Force -Verbose
                }
                catch {
                    if($_ -like "*version * is already available in the repository*"){
                        Throw "This version already exists in MyGet. Update the ModuleVersion in the .psd1 file."
                    }
                }

    Version:
        name: üè∑ Version Tag Step
        needs:
            - Publish
        outputs:
            new_tag: ${{ steps.version.outputs.new_tag }}
            new_version: ${{ steps.version.outputs.new_version }}
            previous_tag: ${{ steps.version.outputs.tag }}
            previous_version: ${{ steps.version.outputs.version }}
        runs-on: ubuntu-latest
        steps:
            - name: "üöö Get Latest Code"
              uses: actions/checkout@v3
              with:
                fetch-depth: "0"
            - name: "ü§© GitHub Environment Variables Action"
              uses: FranzDiebold/github-env-vars-action@v2.3.1
            - name: Get Version
              run: |
                $psd1FileName = (Get-ChildItem -Filter *.psd1).Name
                Write-Verbose ".psd1 filename: $psd1FileName"
                $ModuleInfo = Import-PowerShellDataFile -path $psd1FileName
                Write-Verbose "Module Manifest Info: $ModuleInfo"
                Write-Output "VERSION=$($ModuleInfo.ModuleVersion)" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            - name: "üè∑ Bump Version"
              id: version
              uses: cmnhospitals/github-tag-action@2.0.0
              env:
                CUSTOM_TAG : ${{ env.VERSION }}
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

